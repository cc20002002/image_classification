temp22=gsub(pattern = '[^result_]',replacement = '',x=temps)
temps = list.files(pattern="sec_nopca.csv")
temps
temps = list.files(pattern="[^result]")
temps
temps = list.files(pattern="[^result_data]")
temps
getwd()
setwd(C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
temps = list.files(pattern="[^result_data]")
temps
temps = list.files(pattern="[^result_data]*.csv")
temps
temps = list.files(pattern="^result_data*.csv")
temps
temps = list.files(pattern="^result_data?.csv")
temps
temps = list.files(pattern="result_data?.csv")
temps
temps = list.files(pattern="result_data")
temps
temp22=temps#gsub(pattern = 'sec_nopca.csv',replacement = '',x=temps)
temp22=str_sub(temp22, start = 20, end = -1L)
temp22
require('stringr')
temp22=str_sub(temp22, start = 20, end = -1L)
temp22
temp22=temps#gsub(pattern = 'sec_nopca.csv',replacement = '',x=temps)
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
temp22
as.numeric(gsub("[^0-9.]", "", temp22) )
temp2
gsub("[^0-9.]", "", temp22)
temp22=gsub(pattern = 'sec.csv',replacement = '',x=temps)
temp22=gsub(pattern = 'sec.csv',replacement = '',x=temps)
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
temp32
#############
myfiless = lapply(temps32, read.csv,header=FALSE)
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
#############
myfiless = lapply(temps32, read.csv,header=FALSE)
#############
myfiless = lapply(temp32, read.csv,header=FALSE)
#############
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless
rep('Expectation Maximisation',9)
myfiless$algorithm=c(rep('Expectation Maximisation',9),rep('Relabelling',9),rep('Importance Reweighting',9))
myfiles
myfiless
myfiless$dataset='CIFAR without PCA'
myfiless
myfiless
temps
order(c(3,1,2))
temp32
order1=order(temp32[1:9])
order1
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
df2=melt(myfiless, id=17:20)
df2=df2[,c(1,2,3,4,6)]
#################
require(ggplot2)
require(dplyr)
require('data.table')
library(scales)
df2=melt(myfiless, id=17:20)
df2=df2[,c(1,2,3,4,6)]
ggplot(df2, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
names(df2)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df2, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
order1=order(temp32[1:9])
order1
order=list()
order=list(order1,order2,order3)
order1=order(temp32[1:9])
order2=order(temp32[10:18])
order3=order(temp32[19:27])
order=list(order1,order2,order3)
order[[1]]
myfiless[1,]
myfiless[8,]
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data[order[[i]]]
}
myfiless[8,]
18*16
myfiless[1:9,]
seq
for (i in 0:2){
myfiless$data_size[seq(1,9)+i*9]=data[order[[i]]]
}
seq(1,9)+i*9
seq(1,9)+i*9
i=2
seq(1,9)+i*9
i=1
seq(1,9)+i*9
myfiless
myfiless$data_size[seq(1,9)+i*9]
data[order[[i]]]
data=seq(2000,10000,by=1000)
for (i in 0:2){
myfiless$data_size[seq(1,9)+i*9]=data[order[[i]]]
}
data[order[[i]]]
order[[i]]
order
myfiless$data_size[seq(1,9)+i*9]=data[order[[i+1]]]
for (i in 0:2){
myfiless$data_size[seq(1,9)+i*9]=data[order[[i+1]]]
}
myfiless[1:9,]
temp32
as.numeric(gsub("[^0-9.]", "", temp22) )
orders=list(order1,order2,order3)
for (i in 0:2){
myfiless$data_size[seq(1,9)+i*9]=data[orders[[i+1]]]
}
View(order)
rm(order)
temp3
#temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp = list.files(pattern="*.csv")
temps = list.files(pattern="result_data")
temps
temp=setdiff(temp,temps)
temp
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp22=gsub(pattern = 'sec.csv',replacement = '',x=temps)
require('stringr')
temp2=str_sub(temp2, start = 20, end = -1L)
#temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
temp3
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
myfiles
myfiles$`Running time`*16
myfiles[1:10,]
myfiles[1:15,]
19.643638*16
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
data=seq(10000,2000,by=-1000)
for (i in 1:6){
myfiles$data_size[seq(i,54,by=6)]=data
}
myfiles
myfiless
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm/nopca")
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm/nopca")
temps = list.files(pattern="*.csv")
temps
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
temp22=gsub(pattern = 'sec.csv',replacement = '',x=temps)
temp22
temp22=str_sub(temp22, start = 20, end = -1L)
temp22
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
temp32
myfiless
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c(rep('Expectation Maximisation',9),rep('Relabelling',9),rep('Importance Reweighting',9))
myfiless$dataset='CIFAR without PCA'
myfiless$`Running time`=temp32
#############
myfiless = lapply(temps, read.csv,header=FALSE)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm/nopca")
temps = list.files(pattern="*.csv")
myfiless = lapply(temps, read.csv,header=FALSE)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c(rep('Expectation Maximisation',9),rep('Relabelling',9),rep('Importance Reweighting',9))
myfiless$dataset='CIFAR without PCA'
myfiless$`Running time`=temp32
data=seq(2000,10000,by=1000)
myfiless
temp2
temps
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,54,by=6)]=data
}
for (i in 1:3){
myfiless$data_size[seq(i,54,by=3)]=data
}
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
myfiless
myfiles=rbind(myfiles,myfiless)
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
names(df1)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`,linetype=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
warnings()
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset='CIFAR without PCA'
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
myfiles=rbind(myfiles,myfiless)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless=do.call(rbind,myfiless)
myfiless
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm/nopca")
temps = list.files(pattern="*.csv")
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset='CIFAR without PCA'
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
myfiles=rbind(myfiles,myfiless)
df1=df1[,c(1,2,3,4,6)]
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
names(df1)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
myfiless
lm(data=myfiless,formula=`Running time`~data_size)
lm(data=myfiless[seq(1,27,by=3)],formula=`Running time`~data_size)
lm(data=myfiless[seq(1,27,by=3),],formula=`Running time`~data_size)
lm(data=myfiless[seq(1,27,by=3),],formula=log(`Running time`)~log(data_size))
lm(x=log(myfiless$`Running time`[seq(1,27,by=3),]),y=log(myfiless$data_size[seq(1,27,by=3),]))
lm(x=log(myfiless$`Running time`[seq(1,27,by=3),]),y=log(myfiless$Data_size[seq(1,27,by=3),]))
log(myfiless$`Running time`[seq(1,27,by=3),])
myfiless$`Running time`[seq(1,27,by=3),]
lm(x=log(myfiless$`Running time`[seq(1,27,by=3)]),y=log(myfiless$data_size[seq(1,27,by=3)]))
lm(x=log(myfiless$`Running time`[seq(1,27,by=3)]),y=log(myfiless$data_size[seq(1,27,by=3)]))
log(myfiless$`Running time`[seq(1,27,by=3)])
log(myfiless$data_size[seq(1,27,by=3)])
pp=data.frame(y=log(myfiless$`Running time`[seq(1,27,by=3)]),x=log(myfiless$data_size[seq(1,27,by=3)]))
lm(data=pp)
lm(data=myfiles[seq(1,54,by=6),],formula=log(`Running time`)~log(data_size))
lm(data=myfiles[seq(2,54,by=6),],formula=log(`Running time`)~log(data_size))
lm(data=myfiles[seq(3,54,by=6),],formula=log(`Running time`)~log(data_size))
lm(data=myfiles[seq(4,54,by=6),],formula=log(`Running time`)~log(data_size))
lm(data=myfiles[seq(5,54,by=6),],formula=log(`Running time`)~log(data_size))
lm(data=myfiles[seq(6,54,by=6),],formula=log(`Running time`)~log(data_size))
myfiles[1:6,]
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
temp = list.files(pattern="*.csv")
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm/nopca")
temps = list.files(pattern="*.csv")
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
setwd("C:/Users/chenc/Documents/GitHub/image_classification/code/algorithm")
temp=setdiff(temp,temps)
temp=temp[1:54]
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp22=gsub(pattern = 'sec.csv',replacement = '',x=temps)
require('stringr')
temp2=str_sub(temp2, start = 20, end = -1L)
temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
data=seq(10000,2000,by=-1000)
for (i in 1:6){
myfiles$data_size[seq(i,54,by=6)]=data
}
#############
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset='CIFAR without PCA'
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
myfiles=rbind(myfiles,myfiless)
#with(myfiless,order(dataset,algorithm))
require('data.table')
library(scales)
#################
require(ggplot2)
require(dplyr)
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
lm(data=myfiless[seq(1,27,by=3),],formula=log(`Running time`)~log(data_size))
names(df1)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
ggsave(filename = 'speed.pdf',width = 7, height = 4, units = "in")
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`,linetype=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
ggsave(filename = 'accuracy.pdf',width = 7, height = 4.5, units = "in")
tempd=df1%>%filter(`Sample size`==4000)
tempd=tempd[1:6,]
tempn=df1%>%filter(`Sample size`==10000)
tempn=tempn[1:6,]
log(tempn[4]/tempd[4])/log(2.5)#2
tempd=df1%>%filter(`Data set`=='CIFAR with PCA')
tempd=tempd[1:27,]
tempn=df1%>%filter(`Data set`=='MNIST')
tempn=tempn[1:27,]
log(tempn[4]/tempd[4])/log(784/100)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
