df2$`Average Running time`
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color='Dataset',fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=Dataset,fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=`Dataset`,fill = 'gold1',
size = 1)
?geom_boxplot
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=Dataset,fill = 'gold1',
size = 1)
df2
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=df2$Dataset,fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=Dataset,fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy))+
geom_boxplot(color=df2$Algorithm[1:6],fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy,color=algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average Running time`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
#myfiles=t(myfiles)
require('data.table')
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Reweighting','Expectation Maximisation','Relabelling','Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR','CIFAR','CIFAR')
df1=melt(myfiles, id=17:18)
df1[seq(1,96,by=6),5]=round(209.2031/16)
df1[seq(2,96,by=6),5]=round(942.7264/16)
df1[seq(3,96,by=6),5]=round(1059.5852/16)
df1[seq(4,96,by=6),5]=round(812.642/16)
df1[seq(5,96,by=6),5]=round(3742.079/16)
df1[seq(6,96,by=6),5]=round(4208.5504/16)
df1[,5]=as.factor(df1[,5])
names(df1)=c("Algorithm" ,"Dataset",   "Average Running time",  "Accuracy", "Average Running time" )
df2=df1[,c(1,2,4,5)]
require('ggplot2')
library(ggthemes)
library(brms)
theme_set(theme_default())  # from ggthemes
ggplot(df2,aes(x=`Average Running time`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
#myfiles=t(myfiles)
require('data.table')
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Reweighting','Expectation Maximisation','Relabelling','Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR','CIFAR','CIFAR')
df1=melt(myfiles, id=17:18)
df1[seq(1,96,by=6),5]=round(209.2031/16)
df1[seq(2,96,by=6),5]=round(942.7264/16)
df1[seq(3,96,by=6),5]=round(1059.5852/16)
df1[seq(4,96,by=6),5]=round(812.642/16)
df1[seq(5,96,by=6),5]=round(3742.079/16)
df1[seq(6,96,by=6),5]=round(4208.5504/16)
df1[,5]=as.factor(df1[,5])
names(df1)=c("Algorithm" ,"Dataset",   "Average running time (seconds)",  "Accuracy", "Average running time (seconds)" )
df2=df1[,c(1,2,4,5)]
require('ggplot2')
library(ggthemes)
library(brms)
theme_set(theme_default())  # from ggthemes
ggplot(df2,aes(x=`Average Running time`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
df11[Noise==nn], aes(x=`Relative residual error`, fill=Algorithm)) +
geom_histogram(alpha=0.2, position="identity",bins=60)+
ylab("Count")
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
#myfiles=t(myfiles)
require('data.table')
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Reweighting','Expectation Maximisation','Relabelling','Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR','CIFAR','CIFAR')
df1=melt(myfiles, id=17:18)
df1[seq(1,96,by=6),5]=round(209.2031/16)
df1[seq(2,96,by=6),5]=round(942.7264/16)
df1[seq(3,96,by=6),5]=round(1059.5852/16)
df1[seq(4,96,by=6),5]=round(812.642/16)
df1[seq(5,96,by=6),5]=round(3742.079/16)
df1[seq(6,96,by=6),5]=round(4208.5504/16)
df1[,5]=as.factor(df1[,5])
names(df1)=c("Algorithm" ,"Dataset",   "Average running time (seconds)",  "Accuracy", "Average running time (seconds)" )
df2=df1[,c(1,2,4,5)]
require('ggplot2')
library(ggthemes)
library(brms)
theme_set(theme_default())  # from ggthemes
ggplot(df2,aes(x=`Average Running time`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
#myfiles=t(myfiles)
require('data.table')
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Reweighting','Expectation Maximisation','Relabelling','Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR','CIFAR','CIFAR')
df1=melt(myfiles, id=17:18)
df1[seq(1,96,by=6),5]=round(209.2031/16)
df1[seq(2,96,by=6),5]=round(942.7264/16)
df1[seq(3,96,by=6),5]=round(1059.5852/16)
df1[seq(4,96,by=6),5]=round(812.642/16)
df1[seq(5,96,by=6),5]=round(3742.079/16)
df1[seq(6,96,by=6),5]=round(4208.5504/16)
df1[,5]=as.factor(df1[,5])
names(df1)=c("Algorithm" ,"Dataset",   "Average running time (seconds)",  "Accuracy", "Average running time (seconds)" )
df2=df1[,c(1,2,4,5)]
require('ggplot2')
library(ggthemes)
library(brms)
theme_set(theme_default())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1) + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1) + geom_dotplot(binaxis='y', stackdir='center', dotsize=.1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1) + geom_dotplot(binaxis='y', stackdir='center', dotsize=.5)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot(fill = 'gold1',
size = 1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot()
theme_set(theme_bw())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm))+
geom_boxplot()
library(dplyr)
df2 %>% filter(Dataset==nn)
df2 %>% filter(Dataset=='MNIST')
unique(df2$Dataset)
plots=list()
for (nn in unique(df2$Dataset)){
g=ggplot(df2 %>% filter(Dataset==nn),aes(x=`Average running time (seconds)`
,y=Accuracy,color=Algorithm))+
geom_boxplot()
plots=c(plots,list(g+theme(legend.position="none")))
}
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=noises,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plots=list()
for (nn in unique(df2$Dataset)){
g=ggplot(df2 %>% filter(Dataset==nn),aes(x=`Average running time (seconds)`
,y=Accuracy,color=Algorithm))+
geom_boxplot()
plots=c(plots,list(g+theme(legend.position="none")))
}
library(cowplot)
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=noises,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Algorithm,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
?plot_grid
df1
plot_grid(nrow=2,plotlist = plots,hjust =c(-1,-0.55,-0.5,-0.35),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
?plot_grid
plot_grid(nrow=2,plotlist = plots,labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(-1,-1),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(1,1),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(-1,-1),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(-1,.2),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(-1,0),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=2,plotlist = plots,hjust =c(-.3,-.3),labels=c('MNIST','CIFAR')) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1)
theme_set(theme_default())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1)
theme_set(theme_classic())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1)
require('ggplot2')
library(ggthemes)
library(brms)
theme_set(theme_classic())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1)
theme_set(theme_bw())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=as.numeric(Algorithm),fill=Dataset))+
geom_boxplot(size = 1)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=40, c=35)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=20, c=35)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=140, c=35)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=40, c=20)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=40, c=10)
?scale_fill_hue
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=50, c=50)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=50, c=50,h=c(100,200))
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=50, c=50,h=c(0,100))
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=50, c=0)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=0, c=0)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=0, c=100)
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=100, c=100)
ggsave(filename = 'boxplot.pdf',width = 7, height = 7, units = "in")
Datasets=unique(df2$Dataset)
plots=list()
for (nn in Datasets){
g=ggplot(df2[Dataset==nn], aes(x=Accuracy, fill=Algorithm)) +
geom_histogram(alpha=0.2, position="identity",bins=5)
plots=c(plots,list(g+theme(legend.position="none")))
}
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_histogram(alpha=0.2, position="identity",bins=5)
plots=c(plots,list(g+theme(legend.position="none")))
}
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=noises,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_histogram(alpha=0.5, position="identity",bins=3)
plots=c(plots,list(g+theme(legend.position="none")))
}
Datasets=unique(df2$Dataset)
plots=list()
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_density(alpha=0.5, position="identity",bins=3)
plots=c(plots,list(g+theme(legend.position="none")))
}
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-0.55,-0.5,-0.35)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
?geom_density
?draw_grob
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))
df1
myfiles
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ks.test(myfiles[5,],myfiles[6,],alternative ='less')
myfiles[6,]
ks.test(myfiles[5,1:16],myfiles[6,1:16],alternative ='less')
myfiles[6,1:16]
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='less')
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16]+0.2,t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16]-0.2,t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[5,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')
?ks.test
df1
myfiles
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')
mean(myfiles[4,1:16])
(myfiles[4,1:16])
mean(as.numeric(myfiles[4,1:16])
)
mean(as.numeric(myfiles[6,1:16]))
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[5,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16],t(myfiles[4,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]))
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]))
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='less')
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='less')
ks.test(myfiles[4,1:16],t(myfiles[5,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[4,1:16],t(myfiles[5,1:16]),alternative ='less')# em vs relabeling
myfiles
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')# labeling vs reweighting
ks.test(myfiles[5,1:16],t(myfiles[4,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]),alternative ='greater')# labeling vs reweighting
ks.test(myfiles[3,1:16],t(myfiles[1,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]))# em vs relabeling
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]))# labeling vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]))# em vs reweighting
sqrt(32/16/16)
sqrt(32/16/16)*1.224
#reweighting is better than em is better than relabelling
ks.test(myfiles[6,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
#reweighting is better than em is better than relabelling
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
#reweighting is better than em is better than relabelling
ks.test(myfiles[4,1:16]*1000,t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
#reweighting is better than em is better than relabelling
ks.test(myfiles[4,1:16],t(myfiles[6,1:16])*100,alternative ='greater')# em vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]))# labeling vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]))# em vs relabeling
#relabelling is more accuracy than em
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]))# em vs relabeling
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]))# labeling vs reweighting
#reweighting is better than em is better than relabelling
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
#relabelling is more accuracy than em
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]))# em vs relabeling
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]))# labeling vs reweighting
#reweighting is better than em is better than relabelling
ks.test(myfiles[5,1:16],t(myfiles[4,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')# labeling vs reweighting
ggsave(filename = 'histo.pdf',width = 7, height = 7, units = "in")
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)+
ylab("Probability density")
plots=list()
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_density(alpha=0.5, position="identity")
plots=c(plots,list(g+theme(legend.position="none")))
}
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)+
ylab("Probability density")
plots=list()
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_density(alpha=0.5, position="identity")+
ylab("Probability density")
plots=c(plots,list(g+theme(legend.position="none")))
}
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggsave(filename = 'histo.pdf',width = 7, height = 7, units = "in")
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(0.1,0.1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(-0.01,-0.01)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(-0.1,-0.1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(-0,-0)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggsave(filename = 'histo.pdf',width = 7, height = 7, units = "in")
#reweighting is better than em is better than relabelling
ks.test(myfiles[5,1:16],t(myfiles[4,1:16]),alternative ='greater')# em vs relabeling
ks.test(myfiles[4,1:16],t(myfiles[6,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[5,1:16],t(myfiles[6,1:16]),alternative ='greater')# labeling vs reweighting
#relabelling is more accuracy than em
ks.test(myfiles[1,1:16],t(myfiles[2,1:16]),alternative ='greater')# em vs reweighting
ks.test(myfiles[1,1:16],t(myfiles[3,1:16]))# em vs relabeling
ks.test(myfiles[3,1:16],t(myfiles[2,1:16]))# labeling vs reweighting
df11[Noise==nn], aes(x=`Relative residual error`, fill=Algorithm)) +
geom_histogram(alpha=0.2, position="identity",bins=60)+
ylab("Count")
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggsave(filename = 'histo.pdf',width = 7, height = 7, units = "in")
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggsave(filename = 'histo.pdf',width = 7, height = 5, units = "in")
ggsave(filename = 'histo.pdf',width = 7, height = 4, units = "in")
ggsave(filename = 'histo.pdf',width = 7, height = 4.6, units = "in")
df3=myfiles
df3
df3$Mean=rowMeans(df3)
df3$Mean=rowMeans(as.nummeric(df3)
)
df3$Mean=rowMeans(as.numeric(df3))
df3
df3$Mean=rowMeans(as.numeric(df3[,1:16])
)
df3$Mean=rowMeans((df3[,1:16]))
sd((df3[,1:16]))
sd
?Sd
?sd
apply(1,df3[,1:16],sd)
apply(1,df3[,1:16],sd)
?apply
apply(df3[,1:16],1,sd)
df3$Sd=apply(df3[,1:16],1,sd)
df3=df3[,c('',)]
df3=df3[,c('Mean','Sd')]
df3
1/16
myfiles
require('boot')
?boot
myfiles
df1
bootobject <- boot(data=df1,formula=Accuracy~Algorithm+Dataset)
?boot
bootobject <- boot(data=df1,formula=Accuracy~Algorithm+Dataset,R=1000)
bootobject <- boot(data=df1,formula=Accuracy~Algorithm+Dataset,R=1000,statistic=mean)
warnings()
bootobject <- boot(data=df1,formula=Accuracy~Algorithm+Dataset,R=1000,statistic=Mean)
mean.fun <- function(dat, idx) mean(dat[idx], na.rm = TRUE)
bootobject <- boot(data=df1,formula=Accuracy~Algorithm+Dataset,R=1000,statistic=mean.fun)
df1
bootobject <- boot(data=df1[seq(i,96,by=6),4],R=1000,statistic=mean.fun)
boot.ci(bootobject, type='perc' )
for (i in 1:6){
bootobject <- boot(data=df1[seq(i,96,by=6),4],R=1000,statistic=mean.fun)
boot.ci(bootobject, type='perc' )
}
for (i in 1:6){
bootobject <- boot(data=df1[seq(i,96,by=6),4],R=1000,statistic=mean.fun)
a=boot.ci(bootobject, type='perc' )
print(a)
}
df3
a$R
a$percent
for (i in 1:6){
bootobject <- boot(data=df1[seq(i,96,by=6),4],R=1000,statistic=mean.fun)
a=boot.ci(bootobject, type='perc' )
df3$CIl=a$percent[4]
df3$CIu=a$percent[5]
}
df3
seq
df1
for (i in 1:6){
bootobject <- boot(data=df1[seq(i,96,by=6),4],R=1000,statistic=mean.fun)
a=boot.ci(bootobject, type='perc' )
df3[i,]$CIl=a$percent[4]
df3[i,]$CIu=a$percent[5]
}
df3
df4=round(df3,3)
df4
fwrite(df4,file = 'meansd')
fwrite(df4,file = 'meansd.csv')
