load('pca')
df22[seq(1,96,by=6),5]=round(209.2031/16)
df22[seq(2,96,by=6),5]=round(942.7264/16)
df22[seq(3,96,by=6),5]=round(1059.5852/16)
df22[seq(4,96,by=6),5]=round(812.642/16)
df22[seq(5,96,by=6),5]=round(3742.079/16)
df22[seq(6,96,by=6),5]=round(4208.5504/16)
require('ggplot2')
library(ggthemes)
df2$`Average running time (seconds)`=as.numeric(as.character(df2$`Average running time (seconds)`))
theme_set(theme_bw())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 7, height = 7, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 7, height = 7, units = "in")
Datasets=unique(df2$Dataset)
plots=list()
require('dplyr')
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_density(alpha=0.5, position="identity")+
ylab("Probability density")
plots=c(plots,list(g+theme(legend.position="none")))
}
require('cowplot')
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
df2
temp = list.files(pattern="*.csv")
temp=temp[-1]
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
#myfiles=t(myfiles)
require('data.table')
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR','CIFAR','CIFAR')
df1=melt(myfiles, id=17:18)
df1[seq(1,96,by=6),5]=round(209.2031/16)
df1[seq(2,96,by=6),5]=round(942.7264/16)
df1[seq(3,96,by=6),5]=round(1059.5852/16)
df1[seq(4,96,by=6),5]=round(812.642/16)
df1[seq(5,96,by=6),5]=round(3742.079/16)
df1[seq(6,96,by=6),5]=round(4208.5504/16)
df1[,5]=as.factor(df1[,5])
names(df1)=c("Algorithm" ,"Dataset",   "Average running time (seconds)",  "Accuracy", "Average running time (seconds)" )
df2=df1[,c(1,2,4,5)]
load('pca')
df22[,4]=as.factor(df22[,4])
df2=rbind(df2,df22)
require('ggplot2')
library(ggthemes)
df2$`Average running time (seconds)`=as.numeric(as.character(df2$`Average running time (seconds)`))
theme_set(theme_bw())  # from ggthemes
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = .1,width=10) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 7, height = 7, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = .1,width=10) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 7, height = 7, units = "in")
Datasets=unique(df2$Dataset)
plots=list()
require('dplyr')
for (nn in Datasets){
g=ggplot(df2 %>% filter(Dataset==nn), aes(x=Accuracy, fill=Algorithm)) +
geom_density(alpha=0.5, position="identity")+
ylab("Probability density")
plots=c(plots,list(g+theme(legend.position="none")))
}
require('cowplot')
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
?plot_grid
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-6),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-2),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-1),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,0),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-.7),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-.4),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
legend <- get_legend(g+theme(legend.position="top"))
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-.45),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-.45),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
plot_grid(nrow=1,ncol=3,plotlist = plots, labels=Datasets,hjust =c(-1,-1,-.45),vjust=c(2,2)) +
theme(plot.margin=unit(c(1,0,0,0),"cm"))+
draw_grob(legend, .45, .53, .3/3.3, 1)
ggsave(filename = 'histo.pdf',width = 7, height = 4.6, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=10) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 7, height = 7, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=10) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 7, height = 7, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 5, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 5, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 5, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 5, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 7, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=15) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 7, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=20) + scale_fill_hue(l=100, c=100,h.start=330)+
coord_flip()+ theme(legend.position="top")+
guides(fill=guide_legend(ncol=1,nrow=3,byrow=TRUE),color=guide_legend(ncol=1,nrow=3,byrow=TRUE))+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplot.pdf',width = 8, height = 5, units = "in")
ggplot(df2,aes(x=`Average running time (seconds)`,y=Accuracy,color=Algorithm,fill=Dataset))+
geom_boxplot(size = 1,width=20) + scale_fill_hue(l=100, c=100,h.start=330)+
scale_x_continuous(breaks = pretty(df2$`Average running time (seconds)`, n = 10)) +
scale_y_continuous(breaks = pretty(df2$Accuracy, n = 10))
ggsave(filename = 'boxplotv.pdf',width = 8, height = 5, units = "in")
?aes
?geom_boxplot
myfiles
ggsave(filename = 'speed.pdf',width = 7, height = 4, units = "in")
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
require(ggplot2)
ggsave(filename = 'speed.pdf',width = 7, height = 4, units = "in")
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
temp = list.files(pattern="*.csv")
temps = list.files(pattern="sec_nopca.csv")
temp=setdiff(temp,temps)
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp22=gsub(pattern = 'sec_nopca.csv',replacement = '',x=temps)
require('stringr')
temp2=str_sub(temp2, start = 20, end = -1L)
temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
data=seq(10000,2000,by=-1000)
for (i in 1:6){
myfiles$data_size[seq(i,54,by=6)]=data
}
#############
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset=c('CIFAR without PCA','CIFAR without PCA','CIFAR without PCA')
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
myfiles
myfiles=do.call(rbind,myfiles)
temp = list.files(pattern="*.csv")
temps = list.files(pattern="sec_nopca.csv")
temp=setdiff(temp,temps)
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
temp
getwd()
setwd("C:/Users/Chen-New/Documents/GitHub/image_classification/Code/algorithm")
temp = list.files(pattern="*.csv")
temps = list.files(pattern="sec_nopca.csv")
temp=setdiff(temp,temps)
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp22=gsub(pattern = 'sec_nopca.csv',replacement = '',x=temps)
require('stringr')
temp2=str_sub(temp2, start = 20, end = -1L)
temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
data=seq(10000,2000,by=-1000)
for (i in 1:6){
myfiles$data_size[seq(i,54,by=6)]=data
}
#############
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset=c('CIFAR without PCA','CIFAR without PCA','CIFAR without PCA')
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
require(ggplot2)
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
require(dplyr)
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
require(dplyr)
df1=melt(myfiles, id=17:20)
require(ggplot2)
df1=melt(myfiles, id=17:20)
require('stringr')
require('data.table')
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
names(df1)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
temp
temp = list.files(pattern="*.csv")
temps = list.files(pattern="sec_nopca.csv")
temp=setdiff(temp,temps)
temp=temp[1:54]
temp2=gsub(pattern = 'sec.csv',replacement = '',x=temp)
temp22=gsub(pattern = 'sec_nopca.csv',replacement = '',x=temps)
require('stringr')
temp2=str_sub(temp2, start = 20, end = -1L)
temp22=str_sub(temp22, start = 20, end = -1L)
temp3=as.numeric(gsub("[^0-9.]", "", temp2) )/16
temp32=as.numeric(gsub("[^0-9.]", "", temp22) )/16
myfiles = lapply(temp, read.csv,header=FALSE)
myfiles=do.call(rbind,myfiles)
myfiles$data_size=1
myfiles$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting','Expectation Maximisation','Relabelling','Importance Reweighting')
myfiles$dataset=c('MNIST','MNIST','MNIST','CIFAR with PCA','CIFAR with PCA','CIFAR with PCA')
myfiles$`Running time`=temp3
data=seq(10000,2000,by=-1000)
for (i in 1:6){
myfiles$data_size[seq(i,54,by=6)]=data
}
#############
myfiless = lapply(temps, read.csv,header=FALSE)
myfiless=do.call(rbind,myfiless)
myfiless$data_size=1
myfiless$algorithm=c('Expectation Maximisation','Relabelling','Importance Reweighting')
myfiless$dataset=c('CIFAR without PCA','CIFAR without PCA','CIFAR without PCA')
myfiless$`Running time`=temp32
data=seq(10000,2000,by=-1000)
for (i in 1:3){
myfiless$data_size[seq(i,27,by=3)]=data
}
require('data.table')
#################
require(ggplot2)
require(dplyr)
df1=melt(myfiles, id=17:20)
df1=df1[,c(1,2,3,4,6)]
names(df1)=c( "Sample size", "Algorithm", "Data set",  'Average running time (seconds)', "Accuracy"   )
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
library(scales)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) + scale_y_continuous(trans=log10_trans())+ + scale_x_continuous(trans=log10_trans())
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
scale_y_continuous(trans=log10_trans())+
scale_x_continuous(trans=log10_trans())
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")
?coord_trans
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")+ trans_breaks("log10", function(x) 10^x)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")+ breaks_trans("log10", function(x) 10^x)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")+ scale_x_discrete(breaks=seq(0,200,by=25))
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")+ scale_y_discrete(breaks=seq(0,200,by=25))
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+ coord_trans(x="log10", y="log10")
?coord_trans
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
?scales
?math_format
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10")
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10",seq(0,10000,by=1000))
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
df1
df1["2"==10000]
df1["1"==10000]
df1["1"==10000,]
df1["Sample size"==10000,]
df1[`Sample size`==10000,]
df1%>%filter(`Sample size`==10000)
df1%>%filter(`Sample size`==10000)[1:6,]
temp1=df1%>%filter(`Sample size`==10000)
temp1[1:6,]
temp1=temp1[1:6,]
temp2=df1%>%filter(`Sample size`==4000)
temp2=temp2[1:6,]
tempd=df1%>%filter(`Sample size`==4000)
tempd=tempd[1:6,]
tempn=df1%>%filter(`Sample size`==10000)
tempn=tempn[1:6,]
tempn
tempn
tempn[5]
tempn[4]
tempn[4]
tempn[4]/tempd[4]
tempd[4]
tempn[4]
log(tempn[4]/tempd[4])/log(2.5)
df1
tempd=df1%>%filter(`Data set`=='CIFAR with PCA')
tempd=tempd[1:6,]
tempn=df1%>%filter(`Data set`=='MNIST')
tempd=df1%>%filter(`Data set`=='CIFAR with PCA')
tempd
tempd
tempd=df1%>%filter(`Data set`=='CIFAR with PCA')
tempd=tempd[1:27,]
tempn=df1%>%filter(`Data set`=='MNIST')
tempn=tempn[1:27,]
tempn
tempd
log(tempn[4]/tempd[4])/log(784/100)
tempn
tempn[4]
tempd[4]
cbind(tempn[4],tempd[4])
tempn[11,]
tempd[11,]
log(tempn[4]/tempd[4])/log(784/100)
log(10^2/10^1.25)/log(7.84)
df1
df1
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm')+ ylim(0, 39)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm')
log10(6800)/log10(1000)
2/log10(6800)/log10(1000)
2/(log10(6800)/log10(1000))
2/(log10(6800)-log10(1000))
1/(log10(6800)-log10(1000))
1/(log10(6800)-log10(2000))
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5,se=F)
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(log(y)~log(x),alpha=0.5,se=F)
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(formula=log(y)~log(x),alpha=0.5,se=F)
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
?aes
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
df1
df1tempd
tempd
log(tempn[3]/tempd[3])/log(784/100)
log(tempn[4]/tempd[4])/log(784/100)
log(23/3.3)/log(7.84)
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
ggsave(filename = 'accuracy.pdf',width = 7, height = 4.5, units = "in")
ggplot(df1, aes(x=`Sample size`, y=`Average running time (seconds)`,linetype=`Data set`,colour=Algorithm,fill=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3)+
scale_x_log10(
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +geom_smooth(method='lm',se=F)
ggsave(filename = 'speed.pdf',width = 7, height = 4, units = "in")
ggplot(df1, aes(x=`Sample size`, y=`Accuracy`,colour=Algorithm,fill=`Data set`,linetype=`Data set`)) +
geom_point(aes(shape=`Data set`),size=3) +
geom_smooth(alpha=0.5)
ggsave(filename = 'accuracy.pdf',width = 7, height = 4.5, units = "in")
